READ ME: The Bank class manages different types of of accounts, including basic, student, and high roller accounts, dynamically assigning unique ID's and 
resizing storage when necessary. It handles deposits, withdrawals, and interest payments, converting account types based on balance thresholds. 
Maintenance fees and interest rates are applied to all accounts, ensuring proper financial management. The system allows account searches and printing based on 
ownership, enhancing accessibility. By utilizing inheritance and polymorphism, the class ensures seamless account transitions while maintaining efficiency and 
scalability.

// Connor Edwards, Assignment 3

public class Bank {
    private BasicAccount[] accounts;
    private String name;
    private double maintFee;
    private double intRate;
    private int nextId;
    private final double HIGH_ROLLER_LIMIT = 100000;

    /**
     * Construct a bank with an initial capacity for only 2 accounts
     *
     * @param name The bank name
     */
    public Bank(String name) {
        this.name = name;
        accounts = new BasicAccount[2];
    }

    /**
     * Set the interest rate for the bank and all the accounts in it
     *
     * @param intRate The interest rate
     */
    public void setIntRate(double intRate) {
        this.intRate = intRate;
    }

    /**
     * Set the maintenance fee amount for the bank and all the accounts in it
     *
     * @param maintFee The maintenance fee
     */
    public void setMaintFee(double maintFee) {
        this.maintFee = maintFee;
    }

    /**
     * Opens a new account for the given owner with the given balance. The
     * account IDs are assigned successively; e.g. First account gets ID 0,
     * second ID 1, third ID 2, ...
     * If the balance meets the high roller limit, a high roller account is opened.
     * If not, a student account is opened for students and a basic account for non students.
     *
     * The accounts array doubles its capacity every time it is full and a new account must be
     * opened. e.g. starts with length 2 (in the constructor) then becomes 4 when
     * the third account must be added, then becomes 8 when the fifth must be added, then
     * 16, and so on.
     *
     * @param owner   The account owner
     * @param balance The initial balance
     * @return The account ID of the newly opened account.
     */
    public int openAccount(Person owner, double balance) {
        // Check if the accounts array is full, and if so, double its capacity
        if (nextId >= accounts.length) {
            int newLength = accounts.length * 2;
            BasicAccount[] newAccounts = new BasicAccount[newLength];
            System.arraycopy(accounts, 0, newAccounts, 0, accounts.length);
            accounts = newAccounts;
        }

        // Check if the balance meets the high roller limit
        if (balance >= HIGH_ROLLER_LIMIT) {
            // Create a new HighRollerAccount
            HighRollerAccount newAccount = new HighRollerAccount(nextId, owner, name, balance);
            accounts[nextId] = newAccount;
        } else if (owner instanceof Student) {
            // Create a new StudentAccount for students
            StudentAccount newAccount = new StudentAccount(nextId, (Student) owner, name);
            newAccount.deposit(balance);
            accounts[nextId] = newAccount;
        } else {
            // Create a new BasicAccount for non-students
            BasicAccount newAccount = new BasicAccount(nextId, owner, name);
            newAccount.deposit(balance);
            accounts[nextId] = newAccount;
        }

        return nextId++;
    }

    /**
     * Assess the maintenance fee on all the accounts in the bank.
     *
     * @return The total fee collected
     */
    public double assessMaintenanceFee() {
        double totalFee = 0.0;
        for (BasicAccount account : accounts) {
            if (account != null) {
                totalFee += account.assessMaintenanceFee();
            }
        }
        return totalFee;
    }

    /**
     * Pay interest to all the accounts in the bank.
     * Extra credit: If the new balance on any basic or student accounts meets the high roller limit, those accounts
     * are converted to high roller accounts. MUST use the helper private method below to do this.
     */
    public void payInterest() {
        for (BasicAccount account : accounts) {
            if (account != null) {
                account.addInterest();
                // Check if the account should be converted to a high roller account
                changeAccountType(account.getAcctId());
            }
        }
    }

    /**
     * Deposit the given amount to the account with the given ID (if it exists).
     * Extra credit: If the new balance on any basic or student accounts meets the high roller limit, those accounts
     * are converted to high roller accounts. MUST use the helper private method below to do this.
     *
     * @param acctId The account ID
     * @param amount The deposit amount
     */
    public void deposit(int acctId, double amount) {
        if (acctId >= 0 && acctId < nextId) {
            BasicAccount account = accounts[acctId];
            if (account != null) {
                account.deposit(amount);
                // Check if the account should be converted to a high roller account
                changeAccountType(acctId);
            }
        }
    }

    /**
     * Withdraw the given amount from the account with the given ID (if it exists).
     * Extra credit: If the new balance on any high roller accounts falls below the limit, those accounts are
     * converted to basic or student accounts (depending on the owner). MUST use the helper private
     * method below to do this.
     *
     * @param acctId The account ID
     * @param amount The amount to withdraw
     */
    public void withdraw(int acctId, double amount) {
        if (acctId >= 0 && acctId < nextId) {
            BasicAccount account = accounts[acctId];
            if (account != null) {
                account.withdraw(amount);
                // Check if the account should be converted to a basic or student account
                changeAccountType(acctId);
            }
        }
    }

    /**
     * Print all accounts
     * Implementation MUST depend on the toString() representation of accounts and print nothing else.
     */
    public void printAllAccounts() {
        for (BasicAccount account : accounts) {
            if (account != null) {
                System.out.println(account);
            }
        }
    }

    /**
     * Print all
    /**
     * Print all accounts of the given account owner
     * Implementation MUST depend on the toString() representation of accounts and print nothing else.
     * It MUST also depend on the .equals implementation of the Person class.
     * Specifically, you cannot compare IDs or names in this method.
     *
     * @param owner The account owner
     */
    public void printAccountsForOwner(Person owner) {
        for (BasicAccount account : accounts) {
            if (account != null && account.getOwner().equals(owner)) {
                System.out.println(account);
            }
        }
    }

    /**
     * Check the balance of the account with the given ID and if it is high
     * enough to be a high roller account, but it is not, the account is substituted with a
     * new HighRollerAccount. If it is a high roller account but it should not be since the balance is
     * low, it is substituted with a new student account if the owner is a student, or a basic account
     * otherwise.
     *
     * @param acctId The account ID
     */
    private void changeAccountType(int acctId) {
        if (acctId >= 0 && acctId < nextId) {
            BasicAccount account = accounts[acctId];
            if (account != null) {
                double balance = account.getBalance();
                Person owner = account.getOwner();

                if (balance >= HIGH_ROLLER_LIMIT && !(account instanceof HighRollerAccount)) {
                    // Convert to a HighRollerAccount
                    HighRollerAccount newAccount = new HighRollerAccount(acctId, owner, name, balance);
                    accounts[acctId] = newAccount;
                } else if (balance < HIGH_ROLLER_LIMIT) {
                    if (owner instanceof Student) {
                        // Convert to a StudentAccount
                        StudentAccount newAccount = new StudentAccount(acctId, (Student) owner, name);
                        newAccount.deposit(balance);
                        accounts[acctId] = newAccount;
                    } else {
                        // Convert to a BasicAccount
                        BasicAccount newAccount = new BasicAccount(acctId, owner, name);
                        newAccount.deposit(balance);
                        accounts[acctId] = newAccount;
                    }
                }
            }
        }
    }
}

